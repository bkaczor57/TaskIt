// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TaskIt.Server.Data;

#nullable disable

namespace TaskIt.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250220174040_UpdateValidationOfModels")]
    partial class UpdateValidationOfModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CommentId")
                        .HasColumnType("integer");

                    b.Property<int?>("CommentsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int?>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("TasksId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamsId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommentsId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TasksId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamsId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasCheckConstraint("CK_Notifications_OnlyOneReference", "\r\n            (\"TaskId\" IS NOT NULL AND \"CommentId\" IS NULL AND \"TeamId\" IS NULL) OR\r\n            (\"TaskId\" IS NULL AND \"CommentId\" IS NOT NULL AND \"TeamId\" IS NULL) OR\r\n            (\"TaskId\" IS NULL AND \"CommentId\" IS NULL AND \"TeamId\" IS NOT NULL)\r\n        ");
                        });
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Sections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("SectionId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.TeamInvites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InviteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvitedUserId")
                        .HasColumnType("integer");

                    b.Property<int>("InvitingUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InvitingUserId");

                    b.HasIndex("InvitedUserId", "TeamId")
                        .IsUnique();

                    b.ToTable("TeamInvites", t =>
                        {
                            t.HasCheckConstraint("CK_TeamInvites_InvitingNotSelf", "\"InvitedUserId\" <> \"InvitingUserId\"");
                        });
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.UsersTeams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId", "TeamId")
                        .IsUnique();

                    b.ToTable("UsersTeams");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Comments", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Tasks", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskIt.Server.Core.Entities.Users", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Notifications", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Comments", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskIt.Server.Core.Entities.Comments", null)
                        .WithMany("Notifications")
                        .HasForeignKey("CommentsId");

                    b.HasOne("TaskIt.Server.Core.Entities.Tasks", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskIt.Server.Core.Entities.Tasks", null)
                        .WithMany("Notifications")
                        .HasForeignKey("TasksId");

                    b.HasOne("TaskIt.Server.Core.Entities.Teams", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskIt.Server.Core.Entities.Teams", null)
                        .WithMany("Notifications")
                        .HasForeignKey("TeamsId");

                    b.HasOne("TaskIt.Server.Core.Entities.Users", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Task");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Sections", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Teams", "Team")
                        .WithMany("Sections")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Tasks", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Users", "AssignedUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("TaskIt.Server.Core.Entities.Sections", "Section")
                        .WithMany("Tasks")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.TeamInvites", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Users", "InvitedUser")
                        .WithMany("UserInvitationsReceived")
                        .HasForeignKey("InvitedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskIt.Server.Core.Entities.Users", "InvitingUser")
                        .WithMany("UserInvitationsSent")
                        .HasForeignKey("InvitingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("InvitingUser");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Teams", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Users", "Owner")
                        .WithMany("OwnedTeams")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.UsersTeams", b =>
                {
                    b.HasOne("TaskIt.Server.Core.Entities.Teams", "Team")
                        .WithMany("UsersTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskIt.Server.Core.Entities.Users", "User")
                        .WithMany("UsersTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Comments", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Sections", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Tasks", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Teams", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Sections");

                    b.Navigation("UsersTeams");
                });

            modelBuilder.Entity("TaskIt.Server.Core.Entities.Users", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("OwnedTeams");

                    b.Navigation("Tasks");

                    b.Navigation("UserInvitationsReceived");

                    b.Navigation("UserInvitationsSent");

                    b.Navigation("UsersTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
